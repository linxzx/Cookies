<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	 http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
	 http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-4.2.xsd
	 http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
	 http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
	 ">
	<!-- 开启spring注解： -->
	<context:annotation-config></context:annotation-config>
	<!-- 扫描的包 写法1：表示只扫描dao层和service，那如果不只是有这2个层，可以使用写法2 -->
	<!-- <context:component-scan base-package="com.etc.dao,com.etc.service"></context:component-scan>  -->
		
	<!-- 设置扫描的包 写法2：不扫描控制层，控制层由springMVC来扫描 -->
	<context:component-scan base-package="com.etc">
		<!-- 表示不扫描控制层  @Controller-->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan> 

	<!-- 设置与数据库配置文件关联 引入配置文件 读取数据库有关的配置信息-->
    <bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <!-- value="classpath:jdbc.properties" 对应文件的路径 
        	classpath: 代表src的根目录 -->  
        <property name="location" value="classpath:jdbc.properties" />  
    </bean> 
	<!-- 配置数据源连接池有关的属性 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="url" value="${url}"></property>
		<property name="username" value="${username}"></property>
		<property name="password" value="${password}"></property>
		<property name="driverClassName" value="${driver}"></property>
		 <!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}"></property>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${maxActive}"></property>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${maxIdle}"></property>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}"></property>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${maxWait}"></property>
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 --> 
	<!-- 添加spring和mybatis整合的包 -->
	<!-- mybatis的配置  SqlSessionFactoryBean的配置和注入操作-->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- ① 配置和数据源有关 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- ②其他的属性 和映射文件有关的配置信息 -->
		<property name="mapperLocations" value="classpath:com/etc/dao/xml/*.xml"></property>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<!-- 配置扫描器 MapperScannerConfigurer 需要用到mybatis-spring.jar-->
	<!-- spring跟mybatis的整合，扫描所有的dao下的接口，然后创建接口的实现类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.etc.dao"></property>
		<!-- 注意这里的是value 不是ref -->
		<property name="sqlSessionFactoryBeanName" value="sessionFactory"></property>
	</bean>
	
	<!-- 配置事务管理器 -->
	<bean id="transactionManager" 
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
        <property name="dataSource" ref="dataSource" /> 
	</bean>
	
	<!-- 配置通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
		    <!-- 以get开头的方法，不使用事务 -->
			<tx:method name="find*" read-only="true" propagation="NOT_SUPPORTED"></tx:method>
			<tx:method name="select*" read-only="true" propagation="NOT_SUPPORTED"></tx:method>
			<!-- 其他方法使用默认的事务设置  propagation="REQUIRED"如果有事务, 那么加入事务, 没有的话新建一个(默认情况下)-->
			<tx:method name="regist*"  propagation="REQUIRED"></tx:method> 
		</tx:attributes>	
	</tx:advice>
	
	<!-- 配置aop -->
	<aop:config>
 		<!-- 配置切入点 -->
 		<aop:pointcut expression="execution(* com.etc.service.*.*(..))" id="pc"/> 
 		<!-- 配置切入点跟通知器的关联 -->
 		<aop:advisor advice-ref="txAdvice" pointcut-ref="pc"/>
 	</aop:config>  
 	
 	<!-- 如果使用注解，则需要配置：事务注解有关的驱动 -->
 	<tx:annotation-driven transaction-manager="transactionManager"/>
 
</beans>

 
